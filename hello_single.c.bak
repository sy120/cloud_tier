/*
  FUSE: Filesystem in Userspace
  Copyright (C) 2001-2007  Miklos Szeredi <miklos@szeredi.hu>

  This program can be distributed under the terms of the GNU GPL.
  See the file COPYING.

  gcc -Wall hello.c `pkg-config fuse --cflags --libs` -o hello
*/

#define FUSE_USE_VERSION 26

#include <fuse.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <math.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#define BLOCK_SIZE 4096
#define SIZE 1

//static const char *hello_str = "Hello World!\n";
static const char *hello_path = "/hello";
//char *readpath = "/home/bitnami/files";
//off_t filesize;

void logging(const char* param, const char* describ) {
  int fd = open("/home/bitnami/logging", O_WRONLY | O_APPEND);
  char temp[50] = {'\0'};
  strcpy(temp, describ);
  strcat(temp, param);
  strcat(temp, "\n");
  write(fd, temp, 50);
  close(fd);
}

static int hello_getattr(const char *path, struct stat *stbuf)
{
  int res = 0;
  logging(path, "getattr path = ");
  memset(stbuf, 0, sizeof(struct stat));
  if (strcmp(path, "/") == 0) {
    stbuf->st_mode = S_IFDIR | 0777;
    stbuf->st_nlink = 2;
  } else if (strcmp(path, hello_path) == 0) {
    stbuf->st_mode = S_IFREG | 0777;
    stbuf->st_nlink = 1;
    //stbuf->st_size = strlen(hello_str);
    //int fd = open(readpath, O_RDWR, S_IRUSR | S_IWUSR);
    //off_t size = lseek(fd, 0, SEEK_END);
    stbuf->st_size = 500 * BLOCK_SIZE;
    //filesize = ;
    //close(fd);
  } else
    res = -ENOENT;
  
  return res;
}

static int hello_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
			 off_t offset, struct fuse_file_info *fi)
{
  (void) offset;
  (void) fi;
  logging(path, "readdir path = ");
  if (strcmp(path, "/") != 0)
    return -ENOENT;
  
  filler(buf, ".", NULL, 0);
  filler(buf, "..", NULL, 0);
  filler(buf, hello_path + 1, NULL, 0);
  //filler(buf, "test.txt", NULL, 0);
  return 0;
}

static int hello_open(const char *path, struct fuse_file_info *fi)
{
  logging(path, "open path = ");
  if (strcmp(path, hello_path) != 0)
    return -ENOENT;
  
  //  if ((fi->flags & 3) != O_RDWR)
  //  return -EACCES;
  //int fd = open(readpath, O_RDWR, S_IRUSR | S_IWUSR);
  //FD = fd;
  
  return 0;
}

static int hello_read(const char *path, char *buf, size_t size, off_t offset,
		      struct fuse_file_info *fi)
{
  logging(path, "read path = ");
  logging(buf, "read buf = ");
  char tempbuf[50];
  sprintf(tempbuf, "%zd", size);
  logging(tempbuf, "read size = ");
  sprintf(tempbuf, "%zd", offset);
  logging(tempbuf, "read offset = ");
  off_t len;
  (void) fi;
  char readpath[256];
  if(strcmp(path, hello_path) != 0)
    return -ENOENT;
	int cursor = 0;
	for (; cursor < size; cursor++) {
	  size_t realoffset = offset + cursor;
	  int block_number = realoffset / BLOCK_SIZE;
	  size_t block_offset = realoffset % BLOCK_SIZE;
	  sprintf(readpath, "/home/bitnami/files/%d", 0);
	  int fd = open(readpath, O_RDWR, S_IRUSR | S_IWUSR);
	  len = 4096;
	  if (realoffset < len) {
	    lseek(fd, realoffset, SEEK_SET);
	    if (realoffset + size > len) {
	      size = len - realoffset;
	    }
	    read(fd, buf + realoffset, size);
	    close(fd);
	  } else {
	    size = 0;
	  }
	}
	return size;
  sprintf(readpath, "/home/bitnami/files/%d", 0);
  int fd = open(readpath, O_RDWR, S_IRUSR | S_IWUSR);
  
  len = lseek(fd, 0, SEEK_END);
  if (offset < len) {
    lseek(fd, offset, SEEK_SET);
    if (offset + size > len)
      size = len - offset;
    read(fd, buf + offset, size);
    close(fd);
    //memcpy(buf, hello_str + offset, size);
  } else
    size = 0;
  
  return size;
}

static int hello_write(const char *path, const char* buf, size_t size, off_t offset, struct fuse_file_info *fi) {
  logging(path, "write path = ");
  logging(buf, "write buf = ");
  char tempbuf[50];
  sprintf(tempbuf, "%zd", size);
  logging(tempbuf, "write size = ");
  sprintf(tempbuf, "%zd", offset);
  logging(tempbuf, "write offset = ");
  size_t len;
  (void)fi;
  size_t offset_within_block = (size_t)(offset % BLOCK_SIZE);
  size_t block_number = (size_t) (offset / BLOCK_SIZE);
  char readpath[256];
  
  sprintf(readpath, "/home/bitnami/files/%d", 0);
  logging(readpath, "write readpath = ");
  int fd = open(readpath, O_RDWR, S_IRUSR | S_IWUSR);

  len = 4096;
  sprintf(tempbuf, "%zd", len);
  logging(tempbuf, "write len = ");
  // offset + size <= 4096
  // size = 4096 offset = 0
  // size = 4096 offset = 4096
  // size = 573  offset = 8192
  // offset = 0, size = 5
  if (offset < len) {
    if (offset + size > len) 
      size = len - offset;
    ssize_t writeBytes = write(fd, buf + offset, size);
    if (writeBytes < size) {
      if (writeBytes == -1) {
	       int err = errno;
	       sprintf(tempbuf, "%d", err);
	       logging(tempbuf, "write write errno = ");
      } 
      else {
	       sprintf(tempbuf, "%zd", writeBytes);
	       logging(tempbuf, "write less bytes, num  = ");
      }
    } 
    else {
      logging("!", "write success");
    }
    close(fd);
  } 
  else { 
    size = 0;
  }
  return size;
}

static int hello_truncate(const char* path, off_t size) {
  logging(path, "truncate path = ");
  int res = truncate(path, size);
  if (res == -1)
       return -errno;

  return 0;  
}

static struct fuse_operations hello_oper = {
  .getattr	= hello_getattr,
  .readdir	= hello_readdir,
  .open		= hello_open,
  .read         = hello_read,
  .write        = hello_write,
  .truncate	= hello_truncate,
};

int main(int argc, char *argv[]) {
	return fuse_main(argc, argv, &hello_oper, NULL);
}

